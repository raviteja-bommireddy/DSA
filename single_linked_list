#include<stdio.h>
#include<stdlib.h>

struct node {                      
    int data;
    struct node *next;
};

struct node *head = NULL;

void create() {
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    printf("Enter the data\n");
    scanf("%d", &newnode->data);
    newnode->next = NULL;
    if (head == NULL) {
        head = newnode;
    } else {
        struct node *temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newnode;
    }
}

void insertb() {
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    printf("Enter the data\n");
    scanf("%d", &newnode->data);
    newnode->next = head;
    head = newnode;
}

void inserte() {
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    printf("Enter the data\n");
    scanf("%d", &newnode->data);
    newnode->next = NULL;
    if (head == NULL) {
        head = newnode;
    } else {
        struct node *temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newnode;
    }
}

void insertpa() {
    int key;
    printf("Enter the data after which you want to insert\n");
    scanf("%d", &key);
    struct node *temp = head;
    while (temp != NULL && temp->data != key) {
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Key not found\n");
        return;
    }
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    printf("Enter the data\n");
    scanf("%d", &newnode->data);
    newnode->next = temp->next;
    temp->next = newnode;
}

void insertpb() {
    int key;
    printf("Enter the data before which you want to insert\n");
    scanf("%d", &key);
    struct node *temp = head;
    struct node *prev = NULL;
    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Key not found\n");
        return;
    }
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    printf("Enter the data\n");
    scanf("%d", &newnode->data);
    newnode->next = temp;
    if (prev != NULL) {
        prev->next = newnode;
    } else {
        head = newnode;
    }
}

void insertpp() {
    int pos;
    printf("Enter the position\n");
    scanf("%d", &pos);
    if (pos <= 0) {
        printf("Invalid position\n");
        return;
    }
    if (pos == 1) {
        insertb();
        return;
    }
    struct node *temp = head;
    struct node *prev = NULL;
    for (int i = 1; temp != NULL && i < pos; i++) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Invalid position\n");
        return;
    }
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    printf("Enter the data\n");
    scanf("%d", &newnode->data);
    newnode->next = temp;
    prev->next = newnode;
}

void deleteb() {
    if (head == NULL) {
        printf("the linked list is empty\n");
        return;
    }
    struct node *temp = head;
    head = head->next;
    free(temp);
}

void deletee() {
    if (head == NULL) {
        printf("the linked list is empty\n");
        return;
    }
    struct node *temp = head;
    struct node *prev = NULL;
    while (temp->next != NULL) {
        prev = temp;
        temp = temp->next;
    }
    if (prev != NULL) {
        prev->next = NULL;
    } else {
        head = NULL;
    }
    free(temp);
}

void deletepa() {
    int key;
    printf("Enter the data after which you want to delete\n");
    scanf("%d", &key);
    struct node *temp = head;
    while (temp != NULL && temp->data != key) {
        temp = temp->next;
    }
    if (temp == NULL || temp->next == NULL) {
        printf("Key not found or no node exists after it\n");
        return;
    }
    struct node *del = temp->next;
    temp->next = del->next;
    free(del);
}

void deletepb() {
    int key;
    printf("Enter the data before which you want to delete\n");
    scanf("%d", &key);
    struct node *temp = head;
    struct node *prev = NULL;
    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL || temp == head) {
        printf("Key not found or no node exists before it\n");
        return;
    }
    prev->next = temp->next;
    free(temp);
}

void deletepp() {
    int pos;
    printf("Enter the position\n");
    scanf("%d", &pos);
    if (pos <= 0) {
        printf("Invalid position\n");
        return;
    }
    if (pos == 1) {
        deleteb();
        return;
    }
    struct node *temp = head;
    struct node *prev = NULL;
    for (int i = 1; temp != NULL && i < pos; i++) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Invalid position\n");
        return;
    }
    prev->next = temp->next;
    free(temp);
}

void reverse() {
    struct node *prev = NULL;
    struct node *curr = head;
    struct node *next = NULL;
    while (curr != NULL) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    head = prev;
}

void display() {
    if (head == NULL) {
        printf("the linked list is empty\n");
        return;
    }
    struct node *temp = head;
    printf("Elements of the linked list are: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    int ch;
    do {
        printf("\nEnter a number from 1 to 14\n");
        printf("1 to create a node,\n2 to insert at beginning,\n3 to insert at end,\n4 to insert after a particular node,\n5 to insert before a particular node,\n6 to insert at a particular position,\n7 to delete at beginning,\n");
        printf("8 to delete at end,\n9 to delete before a particular node,\n10 to delete after a particular node,\n11 to delete at a particular position,\n12 to reverse,\n13 to display,\n0 to exit\n");
        scanf("%d", &ch);
        switch (ch) {
            case 1: create();
                    break;
            case 2: insertb();
                    break;
            case 3: inserte();
                    break;
            case 4: insertpa();
                    break;
            case 5: insertpb();
                    break;
            case 6: insertpp();
                    break;
            case 7: deleteb();
                    break;
            case 8: deletee();
                    break;
            case 9: deletepb();
                    break;
            case 10: deletepa();
                    break;
            case 11: deletepp();
                    break;
            case 12: reverse();
                    break;
            case 13: display();
                    break;
            default: printf("Invalid choice\n");
        }
    } while (ch != 0);
    return 0;
}
