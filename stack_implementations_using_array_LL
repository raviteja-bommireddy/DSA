stack implimenatation using arrays CODE:

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX 100 // Defining the maximum size of the stack

typedef struct Stack {
    int top;
    int items[MAX];
} Stack;

void push(Stack *stack, int item) {
    if (stack->top == MAX - 1) {  // Check if stack is full
        printf("Stack overflow\n");
        return;
    }
    stack->items[++stack->top] = item;
    printf("%d pushed to stack\n", item);
}

int pop(Stack *stack) {
    if (stack->top == -1) {  // Check if stack is empty
        printf("Stack underflow\n");
        return INT_MIN;
    }
    return stack->items[stack->top--];
}

int peek(Stack *stack) {
    if (stack->top == -1) {  // Check if stack is empty
        printf("Stack is empty\n");
        return INT_MIN;
    }
    return stack->items[stack->top];
}

int main() {
    Stack stack;
    stack.top = -1;  // Initialize the stack's top index

    int n, item;
    printf("Enter the number of elements to push onto the stack: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter element %d: ", i + 1);
        scanf("%d", &item);
        push(&stack, item);
    }

    printf("%d popped from stack\n", pop(&stack));
    printf("Top element is %d\n", peek(&stack));

    return 0;
}

EXPLANATION:
(1)Structure Definition (Stack):
    top: Index of the top element in the stack. Initialized to -1 directly in the main function.
    

(2)Push (push):
    Checks if the stack is full by comparing top to MAX - 1.
    Adds an element to the top of the stack and increments top by +1.

(3)Pop (pop):
    Checks if the stack is empty by comparing top to -1.
    Removes an element (which is obvious from top) from the stack and decrements top by -1.

(4)Peek (peek):
    Checks if the stack is empty by comparing top to -1.
    Returns the top element without removing it (changing top value).
    Return or Prints the top most element in the stack.

(5)Main Function (main):
    Initializes the stack's top index directly.
    asks the user to specify how many items they want to add to the stack.
    loads the components into the stack after reading them from the user.
    Shows how to remove one element from the stack and take a quick look at the element at the top.
